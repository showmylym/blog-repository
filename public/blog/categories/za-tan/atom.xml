<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 杂谈 | 电一闪的博客]]></title>
  <link href="http://showmylym.github.io/blog/categories/za-tan/atom.xml" rel="self"/>
  <link href="http://showmylym.github.io/"/>
  <updated>2015-05-10T20:30:43+08:00</updated>
  <id>http://showmylym.github.io/</id>
  <author>
    <name><![CDATA[雷一鸣(Jerry)]]></name>
    <email><![CDATA[showmylym@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[屏幕适配二三事（一）]]></title>
    <link href="http://showmylym.github.io/blog/2015/05/10/ping-mu-shi-pei-er-san-shi/"/>
    <updated>2015-05-10T08:22:12+08:00</updated>
    <id>http://showmylym.github.io/blog/2015/05/10/ping-mu-shi-pei-er-san-shi</id>
    <content type="html"><![CDATA[<h3>背景</h3>

<p>　　屏幕适配一直是老生常谈的话题，也一直是移动端app的重点之一。随着设备分辨率的逐步提高，越来越多的可能性需要在构造UI时考虑到。如何最高效率地完成所有适配，成为一个新的讨论议题。<br/>
　　闲话稍叙，首先看两个iPhone5上的场景。</p>

<h3>场景一 —— 微信聊天“表情选取栏”</h3>

<p><img src="http://showmylym-blog.oss-cn-shenzhen.aliyuncs.com/3%2F%E5%BE%AE%E4%BF%A1%E8%A1%A8%E6%83%85%E9%A6%96%E9%A1%B55c.jpg" title="微信聊天“表情选取栏”" alt="微信聊天“表情选取栏”"/></p>

<h3>场景二 —— 支付宝宫格样式首页</h3>

<p><img src="http://showmylym-blog.oss-cn-shenzhen.aliyuncs.com/3%2F%E6%94%AF%E4%BB%98%E5%AE%9D%E5%AE%AB%E6%A0%BC%E9%A6%96%E9%A1%B55c.jpg" title="微信聊天“表情选取栏”" alt="微信聊天“表情选取栏”"/></p>

<h3>场景解析</h3>

<p>　　如上所示，场景一和场景二是能够频繁碰到的多屏适配情况，但两者适配策略略有不同。<br/>
　　前者属于散列布局，UI整体由众多相同类型的元素排列而成，适配时存在调整margin和space的可能性。因其元素本身较小，为了保证整体的保真度，无论何种屏幕，必须优先表情主体突出的原则，避免放大space，喧宾夺主。因此最佳的适配手段，是保持原有各项元素尺寸和space不变，挨个排入，不足一个元素单位的空间并入margin，适配对比如下图。<br/>
<img src="http://showmylym-blog.oss-cn-shenzhen.aliyuncs.com/3%2F%E5%BE%AE%E4%BF%A1%E8%A1%A8%E6%83%85%E9%A6%96%E9%A1%B5%E5%AF%B9%E6%AF%94.jpg" title="微信聊天“表情选取栏”首页对比" alt="微信聊天“表情选取栏”首页对比"/><br/>
<img src="http://showmylym-blog.oss-cn-shenzhen.aliyuncs.com/3%2F%E5%BE%AE%E4%BF%A1%E8%A1%A8%E6%83%85%E6%9C%AB%E9%A1%B5%E5%AF%B9%E6%AF%94.jpg" title="微信聊天“表情选取栏”末页对比" alt="微信聊天“表情选取栏”末页对比"/><br/>
　　而后者属于全屏式布局，space不存在，看到的无内容区域属于独立元素单位内部的margin，整体仍被划分为等分的几个元素单位，它们瓜分屏幕，不留任何元素单位之间的外部margin。这种布局有两个适配要点，一个是单行的元素单位数量保持不变；另一个是元素单位内的主体成比例放大，放大的量级与屏幕放大系数（大屏宽除以小屏宽，我是这么定义的）相关。众所周知，5c上屏幕宽度为320（单倍像素，下同），屏幕系数为2；而6p上屏幕宽度为414，屏幕系数为3。因此，放大系数就是 414.0 / 320.0 ≈ 1.29 。如果4个元素单位一行，在5c上{80 x 120}的元素单位，6p上就是{103.5 x 155.25}，内部文本字体大小x1.29，icon同字体放大倍数。处理后，等比例放大的效果与放大前基本一致，如下图。<br/>
<img src="http://showmylym-blog.oss-cn-shenzhen.aliyuncs.com/3%2F%E6%94%AF%E4%BB%98%E5%AE%9D%E5%AE%AB%E6%A0%BC%E9%A6%96%E9%A1%B5%E5%AF%B9%E6%AF%94.png" title="微信聊天“表情选取栏”末页对比" alt="微信聊天“表情选取栏”末页对比"/></p>

<h3>各种iOS设备分辨率一览</h3>

<pre><code>设备         单倍分辨率    倍数  实际分辨率  
iPhone6P    {414, 736}   3x   {1242 x 2208}  
iPhone6     {375, 667}   2x   {750  x 1334}  
iPhone5     {320, 568}   2x   {640  x 1136}  
iPhone4     {320, 480}   2x   {640  x 960}  

设备             单倍分辨率     倍数  实际分辨率  
iPad 2(mini)    {768, 1024}   1x   {768  x 1024}  
iPad mini 2(3)  {768 x 1024}  2x   {1536 x 2048}  
iPad air 1(2)   {768 x 1024}  2x   {1536 x 2048}  
iPad 3(4)       {768 x 1024}  2x   {1536 x 2048}  
</code></pre>

<h3>适配手段一 纯代码构造UI</h3>

<p>　　核心思路：使用相对坐标确定位置，使用占屏幕的比例控制宽度/高度，另外高度/宽度根据内容自适应。</p>

<h3>后记：</h3>

<p>　　天生平凡，但决不甘于平凡。人活着就是要做一些伟大的事以慰藉生命。
　　</p>
]]></content>
  </entry>
  
</feed>
